name: Docker Builds

on:
  push:
    branches:
      - main
    # don't rebuild image if someone only edited unrelated files
    paths-ignore:
      - "README.md"
      - ".github/linters/**"
  pull_request:
    # don't rebuild image if someone only edited unrelated files
    paths-ignore:
      - "README.md"
      - ".github/linters/**"

# cancel any previously-started, yet still active runs of this workflow on the same branch
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write # needed to push docker image to ghcr.io
  # pull-requests: write # needed to create and update comments in PRs

jobs:
  build-image:
    name: Build and push Docker image (digest only)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Prepare platform
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          platforms: ${{ matrix.platform }}
          # it uses github cache API for faster builds:
          # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#cache-backend-api
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          # add attestations for provenance and sbom (bleeding edge BuildKit features)
          # NOTE: for now, this reults in `unknown/unknown` images in all registries but Hub
          # https://docs.docker.com/build/attestations/attestation-storage/
          provenance: true
          sbom: true
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-manifest:
    name: Create and push manifest list
    runs-on: ubuntu-latest
    needs:
      - build-image
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GHCR
        uses: docker/login-action@v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          # this ruleset will create one or more tags for each image in image-names
          # some fire in pr-only, some in push/merge-only
          # I still recommend reusable `latest` tag for human-friendly testing (not servers)
          # I like a full tag for prod images that reads something like `stable-<date>-<commit>`
          # Tags starting with `gha-<run_id>` are unique to each PR commit, and used to test fresh images
          #   rules with is_default_branch only create the tag if it's a push/merge to default branch
          # priority attribute is used to sort tags in the final list. The higher the value,
          #   the higher the priority. The first tag in the list (higher priority) will be used as
          #   the image version for generated OCI label and version output.
          tags: |
            type=raw,value=stable-{{date 'YYYYMMDD'}}-{{sha}},enable={{is_default_branch}},priority=300
            type=ref,event=tag,priority=200
            type=raw,value=latest,enable={{is_default_branch}},priority=100
            type=raw,value=gha-${{ github.run_id }},enable=${{github.event_name == 'pull_request'}},priority=200
            type=ref,event=pr,priority=100

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
