# This file is designed for local testing

services:
  proxy:
    image: caddy
    cap_add:
      - NET_ADMIN
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    configs:
      - source: caddyfile
        target: /etc/caddy/Caddyfile
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      start_interval: 5s

  # Bootstrap service for generating secrets (doesn't need .env.secrets)
  bootstrap:
    build: .
    image: ericsmalling/mastodon:latest
    env_file:
      - .env
    # Note: no .env.secrets here since we're using this to generate that file
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - bootstrap # Only run when explicitly called

  web:
    # You can uncomment the following line if you want to not use the prebuilt image, for example if you have local code changes
    # build: .
    # image: ghcr.io/mastodon/mastodon:v4.4.4
    image: ericsmalling/mastodon:latest
    env_file:
      - .env
      - .env.secrets
    command: bundle exec puma -C config/puma.rb
    healthcheck:
      # prettier-ignore
      test: [
              "CMD-SHELL",
              "curl -s --noproxy localhost localhost:3000/health | grep -q 'OK' || exit 1"
            ]
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      proxy:
        condition: service_healthy
      # - es
    volumes:
      - mastodon-db:/mastodon/public/system

  db:
    #image: postgres:14-alpine
    image: cgr.dev/chainguard/postgres:latest
    shm_size: 256mb
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'pg_isready -h localhost -U "$${DB_USER}" -d "$${DB_NAME}"',
        ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s
    volumes:
      - mastodon-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASS}"

  redis:
    #    image: redis:7-alpine
    image: cgr.dev/chainguard/redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
      start_interval: 5s

    volumes:
      - mastodon-redis:/data

  # es:
  #   restart: always
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
  #   environment:
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
  #     - "xpack.license.self_generated.type=basic"
  #     - "xpack.security.enabled=false"
  #     - "xpack.watcher.enabled=false"
  #     - "xpack.graph.enabled=false"
  #     - "xpack.ml.enabled=false"
  #     - "bootstrap.memory_lock=true"
  #     - "cluster.name=es-mastodon"
  #     - "discovery.type=single-node"
  #     - "thread_pool.write.queue_size=1000"
  #   healthcheck:
  #      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
  #   volumes:
  #      - ./elasticsearch:/usr/share/elasticsearch/data
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   ports:
  #     - '127.0.0.1:9200:9200'

  streaming:
    # You can uncomment the following lines if you want to not use the prebuilt image, for example if you have local code changes
    # build:
    #   dockerfile: ./streaming/Dockerfile
    #   context: .
    image: ghcr.io/mastodon/mastodon-streaming:v4.4.4
    env_file: .env
    command: node ./streaming/index.js
    healthcheck:
      # prettier-ignore
      test: ['CMD-SHELL', "curl -s --noproxy localhost localhost:4000/api/v1/streaming/health | grep -q 'OK' || exit 1"]
    ports:
      - "4000:4000"
    depends_on:
      - db
      - redis

  sidekiq:
    # You can uncomment the following line if you want to not use the prebuilt image, for example if you have local code changes
    build: .
    image: ericsmalling/mastodon:latest
    # image: ghcr.io/mastodon/mastodon:v4.4.4
    env_file:
      - .env
      - .env.secrets
    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    volumes:
      - ./public/system:/mastodon/public/system
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[s]idekiq\ 7' || false"]

  ## Uncomment to enable federation with tor instances along with adding the following ENV variables
  ## http_hidden_proxy=http://privoxy:8118
  ## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
  # tor:
  #   image: sirboops/tor
  #   networks:
  #      - external_network
  #      - internal_network
  #
  # privoxy:
  #   image: sirboops/privoxy
  #   volumes:
  #     - ./priv-config:/opt/config

volumes:
  mastodon-db:
  mastodon-redis:
  caddy_data:
  caddy_config:

configs:
  caddyfile:
    content: |
      # Caddyfile for local Mastodon development with self-signed certificates

      www.bret.lol {
        # Generate self-signed certificate for local development
        tls internal

        # Reverse proxy to Mastodon web service
        reverse_proxy web:3000

        # Enable logging
        log {
          output stdout
          level DEBUG
        }

        # Security headers
        header {
          X-Frame-Options "SAMEORIGIN"
          X-Content-Type-Options "nosniff"
          X-XSS-Protection "1; mode=block"
          Strict-Transport-Security "max-age=31536000; includeSubDomains"
        }
      }
